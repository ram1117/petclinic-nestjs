// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["relationJoins"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String        @id @default(uuid())
  fullname    String
  email       String        @unique
  password    String
  pets        Pet[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  appoinments Appointment[]
}

model Pet {
  id          String        @id @default(uuid())
  name        String
  ownerId     String
  petTypeId   String
  owner       User          @relation(fields: [ownerId], references: [id])
  petType     PetType       @relation(fields: [petTypeId], references: [id])
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  appoinments Appointment[]
}

model PetType {
  id   String @id @default(uuid())
  type String
  pets Pet[]
}

model Doctor {
  id          String                @id @default(uuid())
  name        String                @unique
  degree      String
  experience  Int
  about       String
  treatments  TreatmentsOnDoctors[]
  Appointment Appointment[]
}

model Treatment {
  id          String                @id @default(uuid())
  title       String                @unique
  description String
  price       Float
  doctors     TreatmentsOnDoctors[]
  Appointment Appointment[]
}

model TreatmentsOnDoctors {
  doctorId    String
  doctor      Doctor    @relation(fields: [doctorId], references: [id])
  treatmentId String
  treatment   Treatment @relation(fields: [treatmentId], references: [id])

  @@id([doctorId, treatmentId])
}

model Appointment {
  id          String    @id @default(uuid())
  date        DateTime
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  petId       String
  pet         Pet       @relation(fields: [petId], references: [id])
  doctorId    String
  doctor      Doctor    @relation(fields: [doctorId], references: [id])
  treatmentId String
  treatment   Treatment @relation(fields: [treatmentId], references: [id])
}
